📝 Build a Lightweight Feedback System
We recommend you read through this thoroughly before you start working on it. We have a FAQ section at the end.

🌟 Context
You're building a tool for internal feedback sharing between managers and team members at a company. The goal is to enable structured, ongoing feedback in a simple, secure, and friendly interface.



This assignment is meant to judge your creativity and ability to convert open ended instructions into something real.

✅ Core Features (MVP)
Authentication & Roles

Two user roles: Manager and Employee

Basic login system 

A manager can only see their team members



Feedback Submission

A manager can submit structured feedback for each team member:

Strengths

Areas to improve

Overall sentiment (positive/neutral/negative)

There can be multiple feedbacks to the employee.

A history of feedback is visible to both manager and employee



Feedback Visibility

Employees can see feedback they've received

They cannot see other employees’ data

Managers can edit/update their past feedback

Employees can acknowledge feedback they have read



Dashboard

For a manager: team overview (feedback count, sentiment trends)

For an employee: timeline of feedback received

💡 Bonus (Optional)
Deployment link (e.g., Render, Vercel, Railway, etc.)

Employee can request feedback proactively

Anonymous peer feedback (with optional flag)

Notification (email or in-app)

Tags (e.g., "communication", "leadership", etc.)

Export feedback as PDF

Employees can submit their comments on feedback

Markdown support for comments

⚙️ Tech Guidelines
Any frontend framework: Vue / React / Svelte

Backend: Python

Database: SQLite / Postgres / any

Additional Requirement: Provide a Dockerfile to run the backend app

📦 Deliverables


Once you are done, submit your responses to https://forms.gle/Epw8JTHVdZM4SnRx8



Video Demo of the application - you can upload to a platform like youtube/Loom as an unlisted video and share the link - Limit the video to 5 minutes or less. 

Video walkthrough for the codebase - you can upload to a platform like youtube/Loom as an unlisted video and share the link - Limit this to 10 minutes or less

A public GitHub repo with:

README.md containing:

Setup instructions

Stack and design decisions

A Dockerfile to build and run the backend

Note that we will look at the two videos before we look at the codebase. Make sure your presentation is top notch.



Video submission guidelines:



Make sure the video permissions are public if you’re sharing a google drive link - if its not a public link, we can not look at it.

You need to record yourself talking during the demo



🧠 What We’re Evaluating
Communication skill and presentation skill

Clarity of UI/UX

Thoughtful DB design (role boundaries, access controls)

Clean, modular code (frontend & backend)

Bonus: creativity and empathy in solving a real-world problem

